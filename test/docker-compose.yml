services:
  zookeeper1:
    image: zookeeper:3.9
    container_name: zookeeper1
    environment:
      - ZOO_MY_ID=1
      - ZOO_SERVERS=server.1=zookeeper1:2888:3888;2181 server.2=zookeeper2:2888:3888;2181 server.3=zookeeper3:2888:3888;2181
    networks: 
      - rpc_net
    # 用以保证zookeeper完全启动后再启动服务器
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 5s
      timeout: 3s
      retries: 5

  zookeeper2:
    image: zookeeper:3.9
    container_name: zookeeper2
    environment:
      - ZOO_MY_ID=2
      - ZOO_SERVERS=server.1=zookeeper1:2888:3888;2181 server.2=zookeeper2:2888:3888;2181 server.3=zookeeper3:2888:3888;2181
    networks: 
     - rpc_net
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 5s
      timeout: 3s
      retries: 5

  zookeeper3:
    image: zookeeper:3.9
    container_name: zookeeper3
    environment:
      - ZOO_MY_ID=3
      - ZOO_SERVERS=server.1=zookeeper1:2888:3888;2181 server.2=zookeeper2:2888:3888;2181 server.3=zookeeper3:2888:3888;2181
    networks: 
      - rpc_net
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 5s
      timeout: 3s
      retries: 5
  
  server_builder:
    build:
      context: ..
      dockerfile: test/server/Dockerfile
    image: rpc_server_builder
    command: ["true"]  # 只是占位，防止启动

  server1:
    image: rpc_server_builder
    container_name: rpc_server_1
    environment:
      - MY_IP=rpc_server_1
    depends_on:
      zookeeper1:
        condition: service_healthy
      zookeeper2:
        condition: service_healthy
      zookeeper3:
        condition: service_healthy
    networks: 
      - rpc_net

  server2:
    image: rpc_server_builder
    container_name: rpc_server_2
    environment:
      - MY_IP=rpc_server_2
    depends_on:
      zookeeper1:
        condition: service_healthy
      zookeeper2:
        condition: service_healthy
      zookeeper3:
        condition: service_healthy
    networks: 
      - rpc_net

  client_builder:
    build:
      context: ..
      dockerfile: test/client/Dockerfile
    image: rpc_client_builder
    command: ["true"]  # 只是占位，防止启动

  client1:
    image: rpc_client_builder
    container_name: rpc_client_1
    depends_on:
      - server1
      - server2
      - client_builder
    stdin_open: true
    tty: true
    networks: 
      - rpc_net

  client2:
    image: rpc_client_builder
    container_name: rpc_client_2
    depends_on:
      - server1
      - server2
      - client_builder
    stdin_open: true
    tty: true
    networks: 
      - rpc_net


  client3:
    image: rpc_client_builder
    container_name: rpc_client_3
    depends_on:
      - server1
      - server2
      - client_builder
    stdin_open: true
    tty: true
    networks: 
      - rpc_net


networks:
  rpc_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16